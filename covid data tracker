COVID-19-Data-Tracker/
│
├── data/                    # Sample data folder
│   ├── covid_data.csv       # Example dataset
│   └── processed/           # Cleaned data outputs
│
├── notebooks/
│   └── COVID-19_Analysis.ipynb  # Main Jupyter notebook
│
├── scripts/
│   ├── data_processing.py   # Data cleaning functions
│   └── visualization.py     # Plotting functions
│
├── requirements.txt         # Python dependencies
├── LICENSE                  # MIT License recommended
└── README.md                # Project documentation


1. requirements.txt
pandas>=1.3.0
plotly>=5.0.0
matplotlib>=3.4.0
seaborn>=0.11.0
jupyter>=1.0.0
ipywidgets>=7.6.0
requests>=2.26.0
2. scripts/data_processing.py
python
import pandas as pd
import os

def load_data(filepath):
    """Load COVID-19 data from CSV"""
    try:
        df = pd.read_csv(filepath)
        print(f"Successfully loaded data with {len(df)} rows")
        return df
    except Exception as e:
        print(f"Error loading data: {str(e)}")
        return None

def clean_data(df):
    """Clean and preprocess COVID-19 data"""
    # Convert date columns
    date_cols = df.filter(regex='date|Date', axis=1).columns
    for col in date_cols:
        df[col] = pd.to_datetime(df[col])
    
    # Handle missing values
    df.fillna({
        'cases': 0,
        'deaths': 0,
        'recovered': 0
    }, inplace=True)
    
    # Calculate additional metrics
    df['mortality_rate'] = (df['deaths'] / df['cases']) * 100
    df['recovery_rate'] = (df['recovered'] / df['cases']) * 100
    
    return df

def save_processed_data(df, output_dir='data/processed'):
    """Save processed data to CSV"""
    os.makedirs(output_dir, exist_ok=True)
    output_path = os.path.join(output_dir, 'processed_covid_data.csv')
    df.to_csv(output_path, index=False)
    print(f"Data saved to {output_path}")

if __name__ == "__main__":
    # Example usage
    raw_data = load_data('data/covid_data.csv')
    if raw_data is not None:
        cleaned_data = clean_data(raw_data)
        save_processed_data(cleaned_data)
3. scripts/visualization.py
python
import plotly.express as px
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd

def plot_cases_trend(df, country=None):
    """Plot COVID-19 cases trend"""
    if country:
        df = df[df['country'] == country]
    
    fig = px.line(df, x='date', y='cases',
                 title=f'COVID-19 Cases Trend{" - " + country if country else ""}',
                 labels={'cases': 'Confirmed Cases', 'date': 'Date'})
    fig.show()

def plot_global_map(df, metric='cases'):
    """Plot global heatmap"""
    fig = px.choropleth(df, locations='country',
                       locationmode='country names',
                       color=metric,
                       hover_name='country',
                       title=f'Global COVID-19 {metric.capitalize()}',
                       color_continuous_scale='Viridis')
    fig.show()

def plot_mortality_vs_recovery(df):
    """Scatter plot of mortality vs recovery rates"""
    plt.figure(figsize=(10, 6))
    sns.scatterplot(data=df, x='recovery_rate', y='mortality_rate',
                   hue='country', size='cases', sizes=(20, 200))
    plt.title('Mortality Rate vs Recovery Rate by Country')
    plt.xlabel('Recovery Rate (%)')
    plt.ylabel('Mortality Rate (%)')
    plt.grid(True)
    plt.show()

def plot_top_countries(df, metric='cases', n=10):
    """Bar plot of top N countries by metric"""
    top_countries = df.groupby('country')[metric].max().sort_values(ascending=False).head(n)
    plt.figure(figsize=(12, 6))
    sns.barplot(x=top_countries.values, y=top_countries.index)
    plt.title(f'Top {n} Countries by COVID-19 {metric.capitalize()}')
    plt.xlabel(metric.capitalize())
    plt.ylabel('Country')
    plt.grid(axis='x')
    plt.show()
4. notebooks/COVID-19_Analysis.ipynb
python
{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# COVID-19 Data Analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import libraries\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import plotly.express as px\n",
    "from scripts.data_processing import load_data, clean_data\n",
    "from scripts.visualization import *\n",
    "\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Load and clean data\n",
    "df = load_data('../data/covid_data.csv')\n",
    "df = clean_data(df)\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Basic analysis\n",
    "print(\"Summary Statistics:\")\n",
    "print(df.describe())\n",
    "\n",
    "print(\"\\nTop 10 Countries by Cases:\")\n",
    "print(df.groupby('country')['cases'].max().sort_values(ascending=False).head(10))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Visualizations\n",
    "plot_cases_trend(df, country='US')\n",
    "plot_global_map(df, metric='deaths')\n",
    "plot_mortality_vs_recovery(df)\n",
    "plot_top_countries(df, metric='cases', n=15)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Key Findings\n",
    "- Mortality rates vary significantly between countries\n",
    "- Case trends show multiple waves in most countries\n",
    "- Strong correlation between testing rates and reported cases"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  }
 }
}
5. Sample data/covid_data.csv
csv
date,country,cases,deaths,recovered
2020-01-01,US,100,2,5
2020-01-01,India,50,1,10
2020-01-02,US,150,3,8
2020-01-02,India,75,2,15
2020-01-03,US,300,5,20
2020-01-03,India,120,3,25
